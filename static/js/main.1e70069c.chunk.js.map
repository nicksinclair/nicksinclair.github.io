{"version":3,"sources":["components/Navbar.tsx","components/Home.tsx","components/Design.tsx","components/Art.tsx","components/About.tsx","components/Resume.tsx","components/Footer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Navbar","className","exact","to","Home","Design","Art","About","Resume","Footer","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAgCeA,EA7BU,WACvB,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,UACb,4BACE,4BACE,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,SAIF,4BACE,kBAAC,IAAD,CAASA,GAAG,WAAZ,WAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,QAAZ,QAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,UAAZ,UAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,WAAZ,aAIN,+CCjBSC,EARQ,WACrB,OACE,0BAAMH,UAAU,WACd,sCCKSI,EARU,WACvB,OACE,0BAAMJ,UAAU,WACd,wCCKSK,EARO,WACpB,OACE,0BAAML,UAAU,WACd,qCCKSM,EARS,WACtB,OACE,0BAAMN,UAAU,WACd,uCCKSO,EARU,WACvB,OACE,0BAAMP,UAAU,WACd,wCCOSQ,EAVU,WACvB,OACE,yBAAKR,UAAU,oBACb,4BAAQA,UAAU,UAChB,+CC4BOS,G,MApBO,WACpB,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKV,UAAU,OACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,qBACb,kBAAC,IAAD,CAAOC,OAAK,EAACU,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,OAAOC,UAAWP,IAC9B,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,UAAUC,UAAWL,KAGnC,kBAAC,EAAD,UChBYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1e70069c.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar: React.FC = () => {\n  return (\n    <div className=\"navbar-container\">\n      <nav className=\"navbar\">\n        <ul>\n          <li>\n            <NavLink exact to=\"/\">\n              Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/design\">Design</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/art\">Art</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/about\">About</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/resume\">Resume</NavLink>\n          </li>\n        </ul>\n      </nav>\n      <h2>NICK SINCLAIR</h2>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\n\nconst Home: React.FC = () => {\n  return (\n    <main className=\"content\">\n      <h2>HOME</h2>\n    </main>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst Design: React.FC = () => {\n  return (\n    <main className=\"content\">\n      <h2>Design</h2>\n    </main>\n  );\n};\n\nexport default Design;\n","import React from 'react';\n\nconst Art: React.FC = () => {\n  return (\n    <main className=\"content\">\n      <h2>ART</h2>\n    </main>\n  );\n};\n\nexport default Art;\n","import React from 'react';\n\nconst About: React.FC = () => {\n  return (\n    <main className=\"content\">\n      <h2>ABOUT</h2>\n    </main>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Resume: React.FC = () => {\n  return (\n    <main className=\"content\">\n      <h2>RESUME</h2>\n    </main>\n  );\n};\n\nexport default Resume;\n","import React from 'react';\n\nconst Footer: React.FC = () => {\n  return (\n    <div className=\"footer-container\">\n      <footer className=\"footer\">\n        <h2>In progress!</h2>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","// Absolute imports\nimport React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\n// Relative imports\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport Design from './components/Design';\nimport Art from './components/Art';\nimport About from './components/About';\nimport Resume from './components/Resume';\nimport Footer from './components/Footer';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"app\">\n        <Navbar />\n\n        <div className=\"content-container\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/design\" component={Design} />\n          <Route path=\"/art\" component={Art} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/resume\" component={Resume} />\n        </div>\n\n        <Footer />\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}